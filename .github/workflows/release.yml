# .github/workflows/release.yml

name: Build & Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # --- 任务1: 构建桌面应用 (已恢复) ---
  build-desktop:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install frontend dependencies
        run: yarn install # change this to npm, pnpm or bun depending on which one you use.
      
      # 这个步骤负责从 tauri.conf.json 读取版本号
      - name: Get App Version
        id: get_version
        if: matrix.platform == 'ubuntu-latest'
        run: |
          VERSION=$(grep '"version":' src-tauri/tauri.conf.json | sed -E 's/.*"version": "([^"]+)".*/\1/')
          echo "APP_VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  # --- 任务2: 构建安卓应用 (已修复签名和所有问题) ---
  build-android:
    permissions:
      contents: write
    needs: build-desktop
    runs-on: ubuntu-latest

    env:
      SIGNING_KEY_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64
            rust_target: aarch64-linux-android
            artifact_path: "src-tauri/gen/android/app/build/outputs/apk/arm64/release/app-arm64-release.apk"
          - target: x86_64
            rust_target: x86_64-linux-android
            artifact_path: "src-tauri/gen/android/app/build/outputs/apk/x86_64/release/app-x86_64-release.apk"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "zulu"
      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r27b
      # 关键修正：为安卓任务也安装Linux桌面依赖
      - name: Install Linux Desktop Dependencies for Tauri Action
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          # 我们只需要安装工具链，后续步骤会添加具体的目标
          toolchain: stable
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"
      - name: Install Rust target
        run: rustup target add ${{ matrix.rust_target }}
      - name: Install frontend dependencies
        run: yarn install

      # --- 签名构建流程 ---
      - name: Decode and Create Keystore
        # 2. 核心修正：使用 env 上下文进行判断
        if: env.SIGNING_KEY_BASE64 != ''
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > $RUNNER_TEMP/release.jks

      - name: setup Android signing
        run: |
          cd src-tauri/gen/android
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" > keystore.properties
          echo "password=${{ secrets.KEY_PASSWORD }}" >> keystore.properties
          echo "storeFile=$RUNNER_TEMP/release.jks" >> keystore.properties

      - name: Build Android App
        if: env.SIGNING_KEY_BASE64 != ''
        # 3. 核心修正：在run脚本内部导出环境变量，确保生效
        run: |
          export NDK_HOME="${{ steps.setup-ndk.outputs.ndk-path }}"
          npx tauri android build --target ${{ matrix.target }} --split-per-abi
        
      # - name: Upload Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: APK File ${{ github.ref_name }}-${{matrix.target}}
      #     path: |
      #       ${{ github.workspace }}/${{ matrix.artifact_path }} 
      # 这个步骤负责将安卓APK上传到上一个任务创建的Release中
      - name: Upload Android Release Asset
        uses: softprops/action-gh-release@v2
        with:
          # 我们使用 needs.build-desktop.outputs.APP_VERSION 来确保
          # tag_name 与上一个任务创建的Release完全一致
          tag_name: app-v${{ needs.build-desktop.outputs.APP_VERSION }}
          # files 就是您APK的路径
          files: ${{ matrix.artifact_path }}
