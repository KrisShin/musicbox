# .github/workflows/release.yml

name: Build & Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # --- 任务1: 构建桌面应用 (已恢复) ---
  # build-desktop:
  #   permissions:
  #     contents: write
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       platform: [macos-latest, ubuntu-latest, windows-latest]
  #   runs-on: ${{ matrix.platform }}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 22
  #     - name: Install Linux dependencies
  #       if: matrix.platform == 'ubuntu-latest'
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
  #     - name: Setup Rust
  #       uses: dtolnay/rust-toolchain@stable
  #     - name: Rust cache
  #       uses: swatinem/rust-cache@v2
  #       with:
  #         workspaces: "./src-tauri -> target"
  #     - name: Install frontend dependencies
  #       run: yarn install
  #     - name: Build and Upload Desktop Release Asset
  #       uses: tauri-apps/tauri-action@v0
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tagName: app-v__VERSION__
  #         releaseName: "App v__VERSION__"
  #         releaseBody: "See the assets to download this version."
  #         releaseDraft: true
  #         prerelease: false

  # --- 任务2: 构建安卓应用 (已修复签名和所有问题) ---
  build-android:
    permissions:
      contents: write
    # needs: build-desktop
    runs-on: ubuntu-latest

    env:
      SIGNING_KEY_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64
            rust_target: aarch64-linux-android
            artifact_path: "src-tauri/gen/android/app/build/outputs/apk/release/app-aarch64-*.apk"
          # - target: x86_64
          #   rust_target: x86_64-linux-android
          #   artifact_path: "src-tauri/gen/android/app/build/outputs/apk/release/app-x86_64-*.apk"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "zulu"
      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r25b
      # 关键修正：为安卓任务也安装Linux桌面依赖
      - name: Install Linux Desktop Dependencies for Tauri Action
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          # 我们只需要安装工具链，后续步骤会添加具体的目标
          toolchain: stable
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"
      - name: Install Rust target
        run: rustup target add ${{ matrix.rust_target }}
      - name: Install frontend dependencies
        run: yarn install

      - name: Debug Secrets Availability
        run: |
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then echo "❗❗❗KEYSTORE_BASE64 is SET"; else echo "❎❎❎KEYSTORE_BASE64 is NOT SET"; fi
          if [ -n "${{ secrets.KEYSTORE_PASSWORD }}" ]; then echo "❗❗❗KEYSTORE_PASSWORD is SET"; else echo "❎❎❎KEYSTORE_PASSWORD is NOT SET"; fi
          if [ -n "${{ secrets.KEY_ALIAS }}" ]; then echo "❗❗❗KEY_ALIAS is SET"; else echo "❎❎❎KEY_ALIAS is NOT SET"; fi
          if [ -n "${{ secrets.KEY_PASSWORD }}" ]; then echo "❗❗❗KEY_PASSWORD is SET"; else echo "❎❎❎KEY_PASSWORD is NOT SET"; fi

      # --- 签名构建流程 ---
      - name: Decode and Create Keystore
        # 2. 核心修正：使用 env 上下文进行判断
        if: env.SIGNING_KEY_BASE64 != ''
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > release.jks

      - name: Build Signed Android App
        if: env.SIGNING_KEY_BASE64 != ''
        # 3. 核心修正：在run脚本内部导出环境变量，确保生效
        run: |
          export NDK_HOME="${{ steps.setup-ndk.outputs.ndk-path }}"
          export TAURI_ANDROID_KEYSTORE_PATH="./release.jks"
          export TAURI_ANDROID_KEYSTORE_PASSWORD="${{ secrets.KEYSTORE_PASSWORD }}"
          export TAURI_ANDROID_KEY_ALIAS="${{ secrets.KEY_ALIAS }}"
          export TAURI_ANDROID_KEY_PASSWORD="${{ secrets.KEY_PASSWORD }}"
          npx tauri android build --target ${{ matrix.target }}
      
      - name: Verify Signed APK
        if: env.SIGNING_KEY_BASE64 != ''
        run: |
          echo "--- 正在检查构建产物 ---"
          ls -R src-tauri/gen/android/app/build/outputs/apk/release
          SIGNED_APK_PATH=$(find src-tauri/gen/android/app/build/outputs/apk/release -name "*-signed.apk" | head -n 1)
          if [ -n "$SIGNED_APK_PATH" ]; then
            echo "✅ 成功找到签名后的APK: $SIGNED_APK_PATH"
            echo "--- 正在验证签名信息 ---"
            APKSIGNER_PATH=$(find $ANDROID_HOME/build-tools -name "apksigner" | head -n 1)
            $APKSIGNER_PATH verify --print-certs "$SIGNED_APK_PATH"
          else
            echo "❌ 错误：签名失败！未找到签名后的APK文件。"
            echo "Tauri可能因为密钥、密码或别名错误而回退到了未签名构建。"
            exit 1
          fi
        
      - name: Upload Signed Android Release Asset
        if: env.SIGNING_KEY_BASE64 != ''
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          distPath: ${{ matrix.artifact_path }}
          tagName: "app-v__VERSION__"
          releaseName: "App v__VERSION__"
          releaseDraft: true
          prerelease: false
